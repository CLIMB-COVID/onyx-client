{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Onyx-client","text":""},{"location":"#introduction","title":"Introduction","text":"<p>This site documents Onyx-client, a program that provides a command-line interface and Python API for interacting with the Onyx database.</p> <p>Onyx is being developed as part of the CLIMB-TRE project. </p> <p></p>"},{"location":"#installation","title":"Installation","text":""},{"location":"#install-from-conda-forge-recommended","title":"Install from conda-forge (recommended)","text":"<pre><code>$ conda create --name onyx --channel conda-forge climb-onyx-client\n</code></pre> <p>This installs the latest version of the Onyx-Client from conda-forge.</p>"},{"location":"#install-from-pypi","title":"Install from PyPI","text":"<pre><code>$ pip install climb-onyx-client\n</code></pre> <p>This installs the latest version of the Onyx-Client from PyPI.</p>"},{"location":"#build-from-source","title":"Build from source","text":"<p>Download the source code from Github:</p> <pre><code>$ git clone https://github.com/CLIMB-COVID/onyx-client.git\n</code></pre> <p>Run installation from within the source code directory:</p> <pre><code>$ cd onyx-client/\n$ pip install .\n</code></pre>"},{"location":"#accessibility","title":"Accessibility","text":""},{"location":"#enabledisable-colours-in-the-command-line-interface","title":"Enable/disable colours in the command-line interface","text":"<p>Colours are enabled by default in the output of the command-line interface. To disable them, create an environment variable <code>ONYX_COLOURS</code> with the value <code>NONE</code>:</p> <pre><code>$ export ONYX_COLOURS=NONE\n</code></pre> <p></p> <p>To re-enable colours, unset the environment variable:</p> <pre><code>$ unset ONYX_COLOURS\n</code></pre>"},{"location":"api/documentation/client/","title":"OnyxClient","text":"<p>               Bases: <code>OnyxClientBase</code></p> <p>Class for querying and manipulating data within Onyx.</p>"},{"location":"api/documentation/client/#onyx.OnyxClient.__init__","title":"<code>__init__(config)</code>","text":"<p>Initialise a client.</p> PARAMETER DESCRIPTION <code>config</code> <p><code>OnyxConfig</code> object that stores information for connecting and authenticating with Onyx.</p> <p> TYPE: <code>OnyxConfig</code> </p> <p>Examples:</p> <p>The recommended way to initialise a client (as a context manager): <pre><code>import os\nfrom onyx import OnyxConfig, OnyxEnv, OnyxClient\n\nconfig = OnyxConfig(\n    domain=os.environ[OnyxEnv.DOMAIN],\n    token=os.environ[OnyxEnv.TOKEN],\n)\n\nwith OnyxClient(config) as client:\n    pass # Do something with the client here\n</code></pre></p> <p>Alternatively, the client can be initialised as follows: <pre><code>import os\nfrom onyx import OnyxConfig, OnyxEnv, OnyxClient\n\nconfig = OnyxConfig(\n    domain=os.environ[OnyxEnv.DOMAIN],\n    token=os.environ[OnyxEnv.TOKEN],\n)\n\nclient = OnyxClient(config)\n# Do something with the client here\n</code></pre></p> Tips <ul> <li>When making multiple requests, using the client as a context manager can improve performance.</li> <li>This is due to the fact that the client will re-use the same session for all requests, rather than creating a new session for each request.</li> <li>For more information, see: https://requests.readthedocs.io/en/master/user/advanced/#session-objects</li> </ul>"},{"location":"api/documentation/client/#onyx.OnyxClient.projects","title":"<code>projects()</code>","text":"<p>View available projects.</p> RETURNS DESCRIPTION <code>List[Dict[str, str]]</code> <p>List of projects.</p> <p>Examples:</p> <p><pre><code>import os\nfrom onyx import OnyxConfig, OnyxEnv, OnyxClient\n\nconfig = OnyxConfig(\n    domain=os.environ[OnyxEnv.DOMAIN],\n    token=os.environ[OnyxEnv.TOKEN],\n)\n\nwith OnyxClient(config) as client:\n    projects = client.projects()\n</code></pre> <pre><code>&gt;&gt;&gt; projects\n[\n    {\n        \"project\": \"project_1\",\n        \"scope\": \"admin\",\n        \"actions\": [\n            \"get\",\n            \"list\",\n            \"filter\",\n            \"add\",\n            \"change\",\n            \"delete\",\n        ],\n    },\n    {\n        \"project\": \"project_2\",\n        \"scope\": \"analyst\",\n        \"actions\": [\n            \"get\",\n            \"list\",\n            \"filter\",\n        ],\n    },\n]\n</code></pre></p>"},{"location":"api/documentation/client/#onyx.OnyxClient.types","title":"<code>types()</code>","text":"<p>View available field types.</p> RETURNS DESCRIPTION <code>List[Dict[str, Any]]</code> <p>List of field types.</p> <p>Examples:</p> <p><pre><code>import os\nfrom onyx import OnyxConfig, OnyxEnv, OnyxClient\n\nconfig = OnyxConfig(\n    domain=os.environ[OnyxEnv.DOMAIN],\n    token=os.environ[OnyxEnv.TOKEN],\n)\n\nwith OnyxClient(config) as client:\n    field_types = client.types()\n</code></pre> <pre><code>&gt;&gt;&gt; field_types\n[\n    {\n        \"type\": \"text\",\n        \"description\": \"A string of characters.\",\n        \"lookups\": [\n            \"exact\",\n            \"ne\",\n            \"in\",\n            \"notin\",\n            \"contains\",\n            \"startswith\",\n            \"endswith\",\n            \"iexact\",\n            \"icontains\",\n            \"istartswith\",\n            \"iendswith\",\n            \"length\",\n            \"length__in\",\n            \"length__range\",\n            \"isnull\",\n        ],\n    },\n    {\n        \"type\": \"choice\",\n        \"description\": \"A restricted set of options.\",\n        \"lookups\": [\n            \"exact\",\n            \"ne\",\n            \"in\",\n            \"notin\",\n            \"isnull\",\n        ],\n    },\n]\n</code></pre></p>"},{"location":"api/documentation/client/#onyx.OnyxClient.lookups","title":"<code>lookups()</code>","text":"<p>View available lookups.</p> RETURNS DESCRIPTION <code>List[Dict[str, Any]]</code> <p>List of lookups.</p> <p>Examples:</p> <p><pre><code>import os\n\nfrom onyx import OnyxConfig, OnyxEnv, OnyxClient\n\nconfig = OnyxConfig(\n    domain=os.environ[OnyxEnv.DOMAIN],\n    token=os.environ[OnyxEnv.TOKEN],\n)\n\nwith OnyxClient(config) as client:\n    lookups = client.lookups()\n</code></pre> <pre><code>&gt;&gt;&gt; lookups\n[\n    {\n        \"lookup\": \"exact\",\n        \"description\": \"The field's value must be equal to the query value.\",\n        \"types\": [\n            \"text\",\n            \"choice\",\n            \"integer\",\n            \"decimal\",\n            \"date\",\n            \"datetime\",\n            \"bool\",\n        ],\n    },\n    {\n        \"lookup\": \"ne\",\n        \"description\": \"The field's value must not be equal to the query value.\",\n        \"types\": [\n            \"text\",\n            \"choice\",\n            \"integer\",\n            \"decimal\",\n            \"date\",\n            \"datetime\",\n            \"bool\",\n        ],\n    },\n]\n</code></pre></p>"},{"location":"api/documentation/client/#onyx.OnyxClient.fields","title":"<code>fields(project)</code>","text":"<p>View fields for a project.</p> PARAMETER DESCRIPTION <code>project</code> <p>Name of the project.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Dict[str, Any]</code> <p>Dict of fields.</p> <p>Examples:</p> <p><pre><code>import os\nfrom onyx import OnyxConfig, OnyxEnv, OnyxClient\n\nconfig = OnyxConfig(\n    domain=os.environ[OnyxEnv.DOMAIN],\n    token=os.environ[OnyxEnv.TOKEN],\n)\n\nwith OnyxClient(config) as client:\n    fields = client.fields(\"project\")\n</code></pre> <pre><code>&gt;&gt;&gt; fields\n{\n    \"version\": \"0.1.0\",\n    \"fields\": {\n        \"climb_id\": {\n            \"description\": \"Unique identifier for a project record in Onyx.\",\n            \"type\": \"text\",\n            \"required\": True,\n            \"actions\": [\n                \"get\",\n                \"list\",\n                \"filter\",\n            ],\n            \"restrictions\": [\n                \"Max length: 12\",\n            ],\n        },\n        \"is_published\": {\n            \"description\": \"Indicator for whether a project record has been published.\",\n            \"type\": \"bool\",\n            \"required\": False,\n            \"actions\": [\n                \"get\",\n                \"list\",\n                \"filter\",\n                \"add\",\n                \"change\",\n            ],\n            \"default\": True,\n        },\n        \"published_date\": {\n            \"description\": \"The date the project record was published in Onyx.\",\n            \"type\": \"date (YYYY-MM-DD)\",\n            \"required\": False,\n            \"actions\": [\n                \"get\",\n                \"list\",\n                \"filter\",\n            ],\n        },\n        \"country\": {\n            \"description\": \"Country of origin.\",\n            \"type\": \"choice\",\n            \"required\": False,\n            \"actions\": [\n                \"get\",\n                \"list\",\n                \"filter\",\n                \"add\",\n                \"change\",\n            ],\n            \"values\": [\n                \"ENG\",\n                \"WALES\",\n                \"SCOT\",\n                \"NI\",\n            ],\n        },\n    },\n}\n</code></pre></p>"},{"location":"api/documentation/client/#onyx.OnyxClient.choices","title":"<code>choices(project, field)</code>","text":"<p>View choices for a field.</p> PARAMETER DESCRIPTION <code>project</code> <p>Name of the project.</p> <p> TYPE: <code>str</code> </p> <code>field</code> <p>Choice field on the project.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Dict[str, Dict[str, Any]]</code> <p>Dictionary mapping choices to information about the choice.</p> <p>Examples:</p> <p><pre><code>import os\nfrom onyx import OnyxConfig, OnyxEnv, OnyxClient\n\nconfig = OnyxConfig(\n    domain=os.environ[OnyxEnv.DOMAIN],\n    token=os.environ[OnyxEnv.TOKEN],\n)\n\nwith OnyxClient(config) as client:\n    choices = client.choices(\"project\", \"country\")\n</code></pre> <pre><code>&gt;&gt;&gt; choices\n{\n    \"ENG\": {\n        \"description\": \"England\",\n        \"is_active\" : True,\n    },\n    \"WALES\": {\n        \"description\": \"Wales\",\n        \"is_active\" : True,\n    },\n    \"SCOT\": {\n        \"description\": \"Scotland\",\n        \"is_active\" : True,\n    },\n    \"NI\": {\n        \"description\": \"Northern Ireland\",\n        \"is_active\" : True,\n    },\n}\n</code></pre></p>"},{"location":"api/documentation/client/#onyx.OnyxClient.get","title":"<code>get(project, climb_id=None, fields=None, include=None, exclude=None)</code>","text":"<p>Get a record from a project.</p> PARAMETER DESCRIPTION <code>project</code> <p>Name of the project.</p> <p> TYPE: <code>str</code> </p> <code>climb_id</code> <p>Unique identifier for the record in the project.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>fields</code> <p>Dictionary of field filters used to uniquely identify the record.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>include</code> <p>Fields to include in the output.</p> <p> TYPE: <code>Union[List[str], str, None]</code> DEFAULT: <code>None</code> </p> <code>exclude</code> <p>Fields to exclude from the output.</p> <p> TYPE: <code>Union[List[str], str, None]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Dict[str, Any]</code> <p>Dict containing the record.</p> <p>Examples:</p> <p>Get a record by CLIMB ID: <pre><code>import os\nfrom onyx import OnyxConfig, OnyxEnv, OnyxClient\n\nconfig = OnyxConfig(\n    domain=os.environ[OnyxEnv.DOMAIN],\n    token=os.environ[OnyxEnv.TOKEN],\n)\n\nwith OnyxClient(config) as client:\n    record = client.get(\"project\", \"C-1234567890\")\n</code></pre> <pre><code>&gt;&gt;&gt; record\n{\n    \"climb_id\": \"C-1234567890\",\n    \"published_date\": \"2023-01-01\",\n    \"field1\": \"value1\",\n    \"field2\": \"value2\",\n}\n</code></pre></p> <p>Get a record by fields that uniquely identify it: <pre><code>import os\nfrom onyx import OnyxConfig, OnyxEnv, OnyxClient\n\nconfig = OnyxConfig(\n    domain=os.environ[OnyxEnv.DOMAIN],\n    token=os.environ[OnyxEnv.TOKEN],\n)\n\nwith OnyxClient(config) as client:\n    record = client.get(\n        \"project\",\n        fields={\n            \"field1\": \"value1\",\n            \"field2\": \"value2\",\n        },\n    )\n</code></pre> <pre><code>&gt;&gt;&gt; record\n{\n    \"climb_id\": \"C-1234567890\",\n    \"published_date\": \"2023-01-01\",\n    \"field1\": \"value1\",\n    \"field2\": \"value2\",\n}\n</code></pre></p> <p>The <code>include</code> and <code>exclude</code> arguments can be used to control the fields returned: <pre><code>import os\nfrom onyx import OnyxConfig, OnyxEnv, OnyxClient\n\nconfig = OnyxConfig(\n    domain=os.environ[OnyxEnv.DOMAIN],\n    token=os.environ[OnyxEnv.TOKEN],\n)\n\nwith OnyxClient(config) as client:\n    record_v1 = client.get(\n        \"project\",\n        climb_id=\"C-1234567890\",\n        include=[\"climb_id\", \"published_date\"],\n    )\n    record_v2 = client.get(\n        \"project\",\n        climb_id=\"C-1234567890\",\n        exclude=[\"field2\"],\n    )\n</code></pre> <pre><code>&gt;&gt;&gt; record_v1\n{\n    \"climb_id\": \"C-1234567890\",\n    \"published_date\": \"2023-01-01\",\n}\n&gt;&gt;&gt; record_v2\n{\n    \"climb_id\": \"C-1234567890\",\n    \"published_date\": \"2023-01-01\",\n    \"field1\": \"value1\",\n}\n</code></pre></p> Tips <ul> <li>Including/excluding fields to reduce the size of the returned data can improve performance.</li> </ul>"},{"location":"api/documentation/client/#onyx.OnyxClient.filter","title":"<code>filter(project, fields=None, include=None, exclude=None, summarise=None, **kwargs)</code>","text":"<p>Filter records from a project.</p> PARAMETER DESCRIPTION <code>project</code> <p>Name of the project.</p> <p> TYPE: <code>str</code> </p> <code>fields</code> <p>Dictionary of field filters.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>include</code> <p>Fields to include in the output.</p> <p> TYPE: <code>Union[List[str], str, None]</code> DEFAULT: <code>None</code> </p> <code>exclude</code> <p>Fields to exclude from the output.</p> <p> TYPE: <code>Union[List[str], str, None]</code> DEFAULT: <code>None</code> </p> <code>summarise</code> <p>For a given field (or group of fields), return the frequency of each unique value (or unique group of values).</p> <p> TYPE: <code>Union[List[str], str, None]</code> DEFAULT: <code>None</code> </p> <code>**kwargs</code> <p>Additional keyword arguments are interpreted as field filters.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>None</code> <p>Generator of records. If a summarise argument is provided, each record will be a dict containing values of the summary fields and a count for the frequency.</p> Notes <ul> <li>Field filters specify requirements that the returned data must satisfy. They can be provided as keyword arguments, or as a dictionary to the <code>fields</code> argument.</li> <li>These filters can be a simple match on a value (e.g. <code>\"published_date\" : \"2023-01-01\"</code>), or they can use a 'lookup' for more complex matching conditions (e.g. <code>\"published_date__iso_year\" : \"2023\"</code>).</li> <li>Multi-value lookups (e.g. <code>in</code>, <code>range</code>) can also be used. For keyword arguments, multiple values can be provided as a Python list. For the <code>fields</code> dictionary, multiple values must be provided as a comma-separated string (see examples below).</li> </ul> <p>Examples:</p> <p>Retrieve all records that match a set of field requirements: <pre><code>import os\nfrom onyx import OnyxConfig, OnyxEnv, OnyxClient\n\nconfig = OnyxConfig(\n    domain=os.environ[OnyxEnv.DOMAIN],\n    token=os.environ[OnyxEnv.TOKEN],\n)\n\n# Field conditions can either be provided as keyword arguments:\nwith OnyxClient(config) as client:\n    records = list(\n        client.filter(\n            project=\"project\",\n            field1=\"abcd\",\n            published_date__range=[\"2023-01-01\", \"2023-01-02\"],\n        )\n    )\n\n# Or as a dictionary to the 'fields' argument:\nwith OnyxClient(config) as client:\n    records = list(\n        client.filter(\n            project=\"project\",\n            fields={\n                \"field1\": \"abcd\",\n                \"published_date__range\" : \"2023-01-01, 2023-01-02\",\n            },\n        )\n    )\n</code></pre> <pre><code>&gt;&gt;&gt; records\n[\n    {\n        \"climb_id\": \"C-1234567890\",\n        \"published_date\": \"2023-01-01\",\n        \"field1\": \"abcd\",\n        \"field2\": 123,\n    },\n    {\n        \"climb_id\": \"C-1234567891\",\n        \"published_date\": \"2023-01-02\",\n        \"field1\": \"abcd\",\n        \"field2\": 456,\n    },\n]\n</code></pre></p> <p>The <code>summarise</code> argument can be used to return the frequency of each unique value for a given field, or the frequency of each unique set of values for a group of fields: <pre><code>import os\nfrom onyx import OnyxConfig, OnyxEnv, OnyxClient\n\nconfig = OnyxConfig(\n    domain=os.environ[OnyxEnv.DOMAIN],\n    token=os.environ[OnyxEnv.TOKEN],\n)\n\nwith OnyxClient(config) as client:\n    records_v1 = list(\n        client.filter(\n            project=\"project\",\n            field1=\"abcd\",\n            published_date__range=[\"2023-01-01\", \"2023-01-02\"],\n            summarise=\"published_date\",\n        )\n    )\n\n    records_v2 = list(\n        client.filter(\n            project=\"project\",\n            field1=\"abcd\",\n            published_date__range=[\"2023-01-01\", \"2023-01-02\"],\n            summarise=[\"published_date\", \"field2\"],\n        )\n    )\n</code></pre> <pre><code>&gt;&gt;&gt; records_v1\n[\n    {\n        \"published_date\": \"2023-01-01\",\n        \"count\": 1,\n    },\n    {\n        \"published_date\": \"2023-01-02\",\n        \"count\": 1,\n    },\n]\n&gt;&gt;&gt; records_v2\n[\n    {\n        \"published_date\": \"2023-01-01\",\n        \"field2\": 123,\n        \"count\": 1,\n    },\n    {\n        \"published_date\": \"2023-01-02\",\n        \"field2\": 456,\n        \"count\": 1,\n    },\n]\n</code></pre></p>"},{"location":"api/documentation/client/#onyx.OnyxClient.query","title":"<code>query(project, query=None, include=None, exclude=None, summarise=None)</code>","text":"<p>Query records from a project.</p> <p>This method supports more complex filtering than the <code>OnyxClient.filter</code> method. Here, filters can be combined using Python's bitwise operators, representing AND, OR, XOR and NOT operations.</p> PARAMETER DESCRIPTION <code>project</code> <p>Name of the project.</p> <p> TYPE: <code>str</code> </p> <code>query</code> <p><code>OnyxField</code> object representing the query being made.</p> <p> TYPE: <code>Optional[OnyxField]</code> DEFAULT: <code>None</code> </p> <code>include</code> <p>Fields to include in the output.</p> <p> TYPE: <code>Union[List[str], str, None]</code> DEFAULT: <code>None</code> </p> <code>exclude</code> <p>Fields to exclude from the output.</p> <p> TYPE: <code>Union[List[str], str, None]</code> DEFAULT: <code>None</code> </p> <code>summarise</code> <p>For a given field (or group of fields), return the frequency of each unique value (or unique group of values).</p> <p> TYPE: <code>Union[List[str], str, None]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>None</code> <p>Generator of records. If a summarise argument is provided, each record will be a dict containing values of the summary fields and a count for the frequency.</p> Notes <ul> <li>The <code>query</code> argument must be an instance of <code>OnyxField</code>.</li> <li><code>OnyxField</code> instances can be combined into complex expressions using Python's bitwise operators: <code>&amp;</code> (AND), <code>|</code> (OR), <code>^</code> (XOR), and <code>~</code> (NOT).</li> <li>Multi-value lookups (e.g. <code>in</code>, <code>range</code>) support passing a Python list (see example below).</li> </ul> <p>Examples:</p> <p>Retrieve all records that match the query provided by an <code>OnyxField</code> object: <pre><code>import os\nfrom onyx import OnyxConfig, OnyxEnv, OnyxClient, OnyxField\n\nconfig = OnyxConfig(\n    domain=os.environ[OnyxEnv.DOMAIN],\n    token=os.environ[OnyxEnv.TOKEN],\n)\n\nwith OnyxClient(config) as client:\n    records = list(\n        client.query(\n            project=\"project\",\n            query=(\n                OnyxField(field1=\"abcd\")\n                &amp; OnyxField(published_date__range=[\"2023-01-01\", \"2023-01-02\"])\n            ),\n        )\n    )\n</code></pre> <pre><code>&gt;&gt;&gt; records\n[\n    {\n        \"climb_id\": \"C-1234567890\",\n        \"published_date\": \"2023-01-01\",\n        \"field1\": \"abcd\",\n        \"field2\": 123,\n    },\n    {\n        \"climb_id\": \"C-1234567891\",\n        \"published_date\": \"2023-01-02\",\n        \"field1\": \"abcd\",\n        \"field2\": 456,\n    },\n]\n</code></pre></p>"},{"location":"api/documentation/client/#onyx.OnyxClient.to_csv","title":"<code>to_csv(csv_file, data, delimiter=None)</code>  <code>classmethod</code>","text":"<p>Write a set of records to a CSV file.</p> PARAMETER DESCRIPTION <code>csv_file</code> <p>File object for the CSV file being written to.</p> <p> TYPE: <code>TextIO</code> </p> <code>data</code> <p>The data being written to the CSV file. Must be either a list / generator of dict records.</p> <p> TYPE: <code>Union[List[Dict[str, Any]], Generator[Dict[str, Any], Any, None]]</code> </p> <code>delimiter</code> <p>CSV delimiter. If not provided, defaults to <code>\",\"</code> for CSVs. Set this to <code>\"\\t\"</code> to work with TSV files.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <p>Examples:</p> <pre><code>import os\nfrom onyx import OnyxConfig, OnyxEnv, OnyxClient\n\nconfig = OnyxConfig(\n    domain=os.environ[OnyxEnv.DOMAIN],\n    token=os.environ[OnyxEnv.TOKEN],\n)\n\nwith OnyxClient(config) as client, open(\"/path/to/file.csv\") as csv_file:\n    client.to_csv(\n        csv_file=csv_file,\n        data=client.filter(\n            \"project\",\n            fields={\n                \"field1\": \"value1\",\n                \"field2\": \"value2\",\n            },\n    )\n</code></pre>"},{"location":"api/documentation/client/#onyx.OnyxClient.history","title":"<code>history(project, climb_id)</code>","text":"<p>View the history of a record in a project.</p> PARAMETER DESCRIPTION <code>project</code> <p>Name of the project.</p> <p> TYPE: <code>str</code> </p> <code>climb_id</code> <p>Unique identifier for the record in the project.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Dict[str, Any]</code> <p>Dict containing the history of the record.</p> <p>Examples:</p> <p><pre><code>import os\nfrom onyx import OnyxConfig, OnyxEnv, OnyxClient\n\nconfig = OnyxConfig(\n    domain=os.environ[OnyxEnv.DOMAIN],\n    token=os.environ[OnyxEnv.TOKEN],\n)\n\nwith OnyxClient(config) as client:\n    history = client.history(\"project\", \"C-1234567890\")\n</code></pre> <pre><code>&gt;&gt;&gt; history\n{\n    \"climb_id\": \"C-1234567890\",\n    \"history\": [\n        {\n            \"username\": \"user\",\n            \"timestamp\": \"2023-01-01T00:00:00Z\",\n            \"action\": \"add\",\n        },\n        {\n            \"username\": \"user\",\n            \"timestamp\": \"2023-01-02T00:00:00Z\",\n            \"action\": \"change\",\n            \"changes\": [\n                {\n                    \"field\": \"field_1\",\n                    \"type\": \"text\",\n                    \"from\": \"value1\",\n                    \"to\": \"value2\",\n                },\n                {\n                    \"field\": \"field_2\",\n                    \"type\": \"integer\",\n                    \"from\": 3,\n                    \"to\": 4,\n                },\n                {\n                    \"field\": \"nested_field\",\n                    \"type\": \"relation\",\n                    \"action\": \"add\",\n                    \"count\" : 3,\n                },\n                {\n                    \"field\": \"nested_field\",\n                    \"type\": \"relation\",\n                    \"action\": \"change\",\n                    \"count\" : 10,\n                },\n            ],\n        },\n    ],\n}\n</code></pre></p>"},{"location":"api/documentation/client/#onyx.OnyxClient.identify","title":"<code>identify(project, field, value, site=None)</code>","text":"<p>Get the anonymised identifier for a value on a field.</p> PARAMETER DESCRIPTION <code>project</code> <p>Name of the project.</p> <p> TYPE: <code>str</code> </p> <code>field</code> <p>Field on the project.</p> <p> TYPE: <code>str</code> </p> <code>value</code> <p>Value to identify.</p> <p> TYPE: <code>str</code> </p> <code>site</code> <p>Site to identify the value on. If not provided, defaults to the user's site.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Dict[str, str]</code> <p>Dict containing the project, site, field, value and anonymised identifier.</p> <p>Examples:</p> <p><pre><code>import os\nfrom onyx import OnyxConfig, OnyxEnv, OnyxClient\n\nconfig = OnyxConfig(\n    domain=os.environ[OnyxEnv.DOMAIN],\n    token=os.environ[OnyxEnv.TOKEN],\n)\n\nwith OnyxClient(config) as client:\n    identification = client.identify(\"project\", \"sample_id\", \"hidden-value\")\n</code></pre> <pre><code>&gt;&gt;&gt; identification\n{\n    \"project\": \"project\",\n    \"site\": \"site\",\n    \"field\": \"sample_id\",\n    \"value\": \"hidden-value\",\n    \"identifier\": \"S-1234567890\",\n}\n</code></pre></p>"},{"location":"api/documentation/client/#onyx.OnyxClient.create","title":"<code>create(project, fields, test=False)</code>","text":"<p>Create a record in a project.</p> PARAMETER DESCRIPTION <code>project</code> <p>Name of the project.</p> <p> TYPE: <code>str</code> </p> <code>fields</code> <p>Object representing the record to be created.</p> <p> TYPE: <code>Dict[str, Any]</code> </p> <code>test</code> <p>If <code>True</code>, runs the command as a test. Default: <code>False</code></p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Dict[str, Any]</code> <p>Dict containing the CLIMB ID of the created record.</p> <p>Examples:</p> <p><pre><code>import os\nfrom onyx import OnyxConfig, OnyxEnv, OnyxClient\n\nconfig = OnyxConfig(\n    domain=os.environ[OnyxEnv.DOMAIN],\n    token=os.environ[OnyxEnv.TOKEN],\n)\n\nwith OnyxClient(config) as client:\n    result = client.create(\n        \"project\",\n        fields={\n            \"field1\": \"value1\",\n            \"field2\": \"value2\",\n        },\n    )\n</code></pre> <pre><code>&gt;&gt;&gt; result\n{\"climb_id\": \"C-1234567890\"}\n</code></pre></p>"},{"location":"api/documentation/client/#onyx.OnyxClient.update","title":"<code>update(project, climb_id, fields=None, test=False)</code>","text":"<p>Update a record in a project.</p> PARAMETER DESCRIPTION <code>project</code> <p>Name of the project.</p> <p> TYPE: <code>str</code> </p> <code>climb_id</code> <p>Unique identifier for the record in the project.</p> <p> TYPE: <code>str</code> </p> <code>fields</code> <p>Object representing the record to be updated.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>test</code> <p>If <code>True</code>, runs the command as a test. Default: <code>False</code></p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Dict[str, Any]</code> <p>Dict containing the CLIMB ID of the updated record.</p> <p>Examples:</p> <p><pre><code>import os\nfrom onyx import OnyxConfig, OnyxEnv, OnyxClient\n\nconfig = OnyxConfig(\n    domain=os.environ[OnyxEnv.DOMAIN],\n    token=os.environ[OnyxEnv.TOKEN],\n)\n\nwith OnyxClient(config) as client:\n    result = client.update(\n        project=\"project\",\n        climb_id=\"C-1234567890\",\n        fields={\n            \"field1\": \"value1\",\n            \"field2\": \"value2\",\n        },\n    )\n</code></pre> <pre><code>&gt;&gt;&gt; result\n{\"climb_id\": \"C-1234567890\"}\n</code></pre></p>"},{"location":"api/documentation/client/#onyx.OnyxClient.delete","title":"<code>delete(project, climb_id)</code>","text":"<p>Delete a record in a project.</p> PARAMETER DESCRIPTION <code>project</code> <p>Name of the project.</p> <p> TYPE: <code>str</code> </p> <code>climb_id</code> <p>Unique identifier for the record in the project.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Dict[str, Any]</code> <p>Dict containing the CLIMB ID of the deleted record.</p> <p>Examples:</p> <p><pre><code>import os\nfrom onyx import OnyxConfig, OnyxEnv, OnyxClient\n\nconfig = OnyxConfig(\n    domain=os.environ[OnyxEnv.DOMAIN],\n    token=os.environ[OnyxEnv.TOKEN],\n)\n\nwith OnyxClient(config) as client:\n    result = client.delete(\n        project=\"project\",\n        climb_id=\"C-1234567890\",\n    )\n</code></pre> <pre><code>&gt;&gt;&gt; result\n{\"climb_id\": \"C-1234567890\"}\n</code></pre></p>"},{"location":"api/documentation/client/#onyx.OnyxClient.csv_create","title":"<code>csv_create(project, csv_file, fields=None, delimiter=None, multiline=False, test=False)</code>","text":"<p>Use a CSV file to create record(s) in a project.</p> PARAMETER DESCRIPTION <code>project</code> <p>Name of the project.</p> <p> TYPE: <code>str</code> </p> <code>csv_file</code> <p>File object for the CSV file being used for record upload.</p> <p> TYPE: <code>TextIO</code> </p> <code>fields</code> <p>Additional fields provided for each record being uploaded. Takes precedence over fields in the CSV.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>delimiter</code> <p>CSV delimiter. If not provided, defaults to <code>\",\"</code> for CSVs. Set this to <code>\"\\t\"</code> to work with TSV files.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>multiline</code> <p>If <code>True</code>, allows processing of CSV files with more than one record. Default: <code>False</code></p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>test</code> <p>If <code>True</code>, runs the command as a test. Default: <code>False</code></p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Union[Dict[str, Any], List[Dict[str, Any]]]</code> <p>Dict containing the CLIMB ID of the created record. If <code>multiline = True</code>, returns a list of dicts containing the CLIMB ID of each created record.</p> <p>Examples:</p> <p>Create a single record: <pre><code>import os\nfrom onyx import OnyxConfig, OnyxEnv, OnyxClient\n\nconfig = OnyxConfig(\n    domain=os.environ[OnyxEnv.DOMAIN],\n    token=os.environ[OnyxEnv.TOKEN],\n)\n\nwith OnyxClient(config) as client, open(\"/path/to/file.csv\") as csv_file:\n    result = client.csv_create(\n        project=\"project\",\n        csv_file=csv_file,\n    )\n</code></pre> <pre><code>&gt;&gt;&gt; result\n{\"climb_id\": \"C-1234567890\"}\n</code></pre></p> <p>Create multiple records: <pre><code>import os\nfrom onyx import OnyxConfig, OnyxEnv, OnyxClient\n\nconfig = OnyxConfig(\n    domain=os.environ[OnyxEnv.DOMAIN],\n    token=os.environ[OnyxEnv.TOKEN],\n)\n\nwith OnyxClient(config) as client, open(\"/path/to/file.csv\") as csv_file:\n    results = client.csv_create(\n        project=\"project\",\n        csv_file=csv_file,\n        multiline=True,\n    )\n</code></pre> <pre><code>&gt;&gt;&gt; results\n[\n    {\"climb_id\": \"C-1234567890\"},\n    {\"climb_id\": \"C-1234567891\"},\n    {\"climb_id\": \"C-1234567892\"},\n]\n</code></pre></p>"},{"location":"api/documentation/client/#onyx.OnyxClient.csv_update","title":"<code>csv_update(project, csv_file, fields=None, delimiter=None, multiline=False, test=False)</code>","text":"<p>Use a CSV file to update record(s) in a project.</p> PARAMETER DESCRIPTION <code>project</code> <p>Name of the project.</p> <p> TYPE: <code>str</code> </p> <code>csv_file</code> <p>File object for the CSV file being used for record upload.</p> <p> TYPE: <code>TextIO</code> </p> <code>fields</code> <p>Additional fields provided for each record being uploaded. Takes precedence over fields in the CSV.</p> <p> TYPE: <code>Optional[Dict[str, Any]]</code> DEFAULT: <code>None</code> </p> <code>delimiter</code> <p>CSV delimiter. If not provided, defaults to <code>\",\"</code> for CSVs. Set this to <code>\"\\t\"</code> to work with TSV files.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>multiline</code> <p>If <code>True</code>, allows processing of CSV files with more than one record. Default: <code>False</code></p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>test</code> <p>If <code>True</code>, runs the command as a test. Default: <code>False</code></p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Union[Dict[str, Any], List[Dict[str, Any]]]</code> <p>Dict containing the CLIMB ID of the updated record. If <code>multiline = True</code>, returns a list of dicts containing the CLIMB ID of each updated record.</p> <p>Examples:</p> <p>Update a single record: <pre><code>import os\nfrom onyx import OnyxConfig, OnyxEnv, OnyxClient\n\nconfig = OnyxConfig(\n    domain=os.environ[OnyxEnv.DOMAIN],\n    token=os.environ[OnyxEnv.TOKEN],\n)\n\nwith OnyxClient(config) as client, open(\"/path/to/file.csv\") as csv_file:\n    result = client.csv_update(\n        project=\"project\",\n        csv_file=csv_file,\n    )\n</code></pre> <pre><code>&gt;&gt;&gt; result\n{\"climb_id\": \"C-1234567890\"}\n</code></pre></p> <p>Update multiple records: <pre><code>import os\nfrom onyx import OnyxConfig, OnyxEnv, OnyxClient\n\nconfig = OnyxConfig(\n    domain=os.environ[OnyxEnv.DOMAIN],\n    token=os.environ[OnyxEnv.TOKEN],\n)\n\nwith OnyxClient(config) as client, open(\"/path/to/file.csv\") as csv_file:\n    results = client.csv_update(\n        project=\"project\",\n        csv_file=csv_file,\n        multiline=True,\n    )\n</code></pre> <pre><code>&gt;&gt;&gt; results\n[\n    {\"climb_id\": \"C-1234567890\"},\n    {\"climb_id\": \"C-1234567891\"},\n    {\"climb_id\": \"C-1234567892\"},\n]\n</code></pre></p>"},{"location":"api/documentation/client/#onyx.OnyxClient.csv_delete","title":"<code>csv_delete(project, csv_file, delimiter=None, multiline=False)</code>","text":"<p>Use a CSV file to delete record(s) in a project.</p> PARAMETER DESCRIPTION <code>project</code> <p>Name of the project.</p> <p> TYPE: <code>str</code> </p> <code>csv_file</code> <p>File object for the CSV file being used for record upload.</p> <p> TYPE: <code>TextIO</code> </p> <code>delimiter</code> <p>CSV delimiter. If not provided, defaults to <code>\",\"</code> for CSVs. Set this to <code>\"\\t\"</code> to work with TSV files.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>multiline</code> <p>If <code>True</code>, allows processing of CSV files with more than one record. Default: <code>False</code></p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Union[Dict[str, Any], List[Dict[str, Any]]]</code> <p>Dict containing the CLIMB ID of the deleted record. If <code>multiline = True</code>, returns a list of dicts containing the CLIMB ID of each deleted record.</p> <p>Examples:</p> <p>Delete a single record: <pre><code>import os\nfrom onyx import OnyxConfig, OnyxEnv, OnyxClient\n\nconfig = OnyxConfig(\n    domain=os.environ[OnyxEnv.DOMAIN],\n    token=os.environ[OnyxEnv.TOKEN],\n)\n\nwith OnyxClient(config) as client, open(\"/path/to/file.csv\") as csv_file:\n    result = client.csv_delete(\n        project=\"project\",\n        csv_file=csv_file,\n    )\n</code></pre> <pre><code>&gt;&gt;&gt; result\n{\"climb_id\": \"C-1234567890\"}\n</code></pre></p> <p>Delete multiple records: <pre><code>import os\nfrom onyx import OnyxConfig, OnyxEnv, OnyxClient\n\nconfig = OnyxConfig(\n    domain=os.environ[OnyxEnv.DOMAIN],\n    token=os.environ[OnyxEnv.TOKEN],\n)\n\nwith OnyxClient(config) as client, open(\"/path/to/file.csv\") as csv_file:\n    results = client.csv_delete(\n        project=\"project\",\n        csv_file=csv_file,\n        multiline=True,\n    )\n</code></pre> <pre><code>&gt;&gt;&gt; results\n[\n    {\"climb_id\": \"C-1234567890\"},\n    {\"climb_id\": \"C-1234567891\"},\n    {\"climb_id\": \"C-1234567892\"},\n]\n</code></pre></p>"},{"location":"api/documentation/client/#onyx.OnyxClient.register","title":"<code>register(domain, first_name, last_name, email, site, password)</code>  <code>classmethod</code>","text":"<p>Create a new user.</p> PARAMETER DESCRIPTION <code>domain</code> <p>Name of the domain.</p> <p> TYPE: <code>str</code> </p> <code>first_name</code> <p>First name of the user.</p> <p> TYPE: <code>str</code> </p> <code>last_name</code> <p>Last name of the user.</p> <p> TYPE: <code>str</code> </p> <code>email</code> <p>Email address of the user.</p> <p> TYPE: <code>str</code> </p> <code>site</code> <p>Name of the site.</p> <p> TYPE: <code>str</code> </p> <code>password</code> <p>Password for the user.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Dict[str, Any]</code> <p>Dict containing the user's information.</p> <p>Examples:</p> <p><pre><code>import os\nfrom onyx import OnyxClient, OnyxEnv\n\nregistration = OnyxClient.register(\n    domain=os.environ[OnyxEnv.DOMAIN],\n    first_name=\"Bill\",\n    last_name=\"Will\",\n    email=\"bill@email.com\",\n    site=\"site\",\n    password=\"pass123\",\n)\n</code></pre> <pre><code>&gt;&gt;&gt; registration\n{\n    \"username\": \"onyx-willb\",\n    \"site\": \"site\",\n    \"email\": \"bill@email.com\",\n    \"first_name\": \"Bill\",\n    \"last_name\": \"Will\",\n}\n</code></pre></p>"},{"location":"api/documentation/client/#onyx.OnyxClient.login","title":"<code>login()</code>","text":"<p>Log in the user.</p> RETURNS DESCRIPTION <code>Dict[str, Any]</code> <p>Dict containing the user's authentication token and it's expiry.</p> <p>Examples:</p> <p><pre><code>import os\nfrom onyx import OnyxConfig, OnyxEnv, OnyxClient\n\nconfig = OnyxConfig(\n    domain=os.environ[OnyxEnv.DOMAIN],\n    username=os.environ[OnyxEnv.USERNAME],\n    password=os.environ[OnyxEnv.PASSWORD],\n)\n\nwith OnyxClient(config) as client:\n    token = client.login()\n</code></pre> <pre><code>&gt;&gt;&gt; token\n{\n    \"expiry\": \"2024-01-01T00:00:00.000000Z\",\n    \"token\": \"abc123\",\n}\n</code></pre></p>"},{"location":"api/documentation/client/#onyx.OnyxClient.logout","title":"<code>logout()</code>","text":"<p>Log out the user.</p> <p>Examples:</p> <pre><code>import os\nfrom onyx import OnyxConfig, OnyxEnv, OnyxClient\n\nconfig = OnyxConfig(\n    domain=os.environ[OnyxEnv.DOMAIN],\n    token=os.environ[OnyxEnv.TOKEN],\n)\n\nwith OnyxClient(config) as client:\n    client.logout()\n</code></pre>"},{"location":"api/documentation/client/#onyx.OnyxClient.logoutall","title":"<code>logoutall()</code>","text":"<p>Log out the user in all clients.</p> <p>Examples:</p> <pre><code>import os\nfrom onyx import OnyxConfig, OnyxEnv, OnyxClient\n\nconfig = OnyxConfig(\n    domain=os.environ[OnyxEnv.DOMAIN],\n    token=os.environ[OnyxEnv.TOKEN],\n)\n\nwith OnyxClient(config) as client:\n    client.logoutall()\n</code></pre>"},{"location":"api/documentation/client/#onyx.OnyxClient.profile","title":"<code>profile()</code>","text":"<p>View the user's information.</p> RETURNS DESCRIPTION <code>Dict[str, str]</code> <p>Dict containing the user's information.</p> <p>Examples:</p> <p><pre><code>import os\nfrom onyx import OnyxConfig, OnyxEnv, OnyxClient\n\nconfig = OnyxConfig(\n    domain=os.environ[OnyxEnv.DOMAIN],\n    token=os.environ[OnyxEnv.TOKEN],\n)\n\nwith OnyxClient(config) as client:\n    profile = client.profile()\n</code></pre> <pre><code>&gt;&gt;&gt; profile\n{\n    \"username\": \"user\",\n    \"site\": \"site\",\n    \"email\": \"user@email.com\",\n}\n</code></pre></p>"},{"location":"api/documentation/client/#onyx.OnyxClient.activity","title":"<code>activity()</code>","text":"<p>View the user's latest activity.</p> RETURNS DESCRIPTION <code>List[Dict[str, Any]]</code> <p>List of the user's latest activity.</p> <p>Examples:</p> <p><pre><code>import os\nfrom onyx import OnyxConfig, OnyxEnv, OnyxClient\n\nconfig = OnyxConfig(\n    domain=os.environ[OnyxEnv.DOMAIN],\n    token=os.environ[OnyxEnv.TOKEN],\n)\n\nwith OnyxClient(config) as client:\n    activity = client.activity()\n</code></pre> <pre><code>&gt;&gt;&gt; activity\n[\n    {\n        \"date\": \"2023-01-01T00:00:00.000000Z\",\n        \"address\": \"127.0.0.1\",\n        \"endpoint\": \"/projects/project/\",\n        \"method\": \"POST\",\n        \"status\": 400,\n        \"exec_time\": 29,\n        \"error_messages\" : \"b'{\"status\":\"fail\",\"code\":400,\"messages\":{\"site\":[\"Select a valid choice.\"]}}'\",\n    },\n    {\n        \"timestamp\": \"2023-01-02T00:00:00.000000Z\",\n        \"address\": \"127.0.0.1\",\n        \"endpoint\": \"/accounts/activity/\",\n        \"method\": \"GET\",\n        \"status\": 200,\n        \"exec_time\": 22,\n        \"error_messages\": \"\",\n    },\n]\n</code></pre></p>"},{"location":"api/documentation/client/#onyx.OnyxClient.approve","title":"<code>approve(username)</code>","text":"<p>Approve another user.</p> PARAMETER DESCRIPTION <code>username</code> <p>Username of the user to be approved.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Dict[str, Any]</code> <p>Dict confirming user approval success.</p> <p>Examples:</p> <p><pre><code>import os\nfrom onyx import OnyxConfig, OnyxEnv, OnyxClient\n\nconfig = OnyxConfig(\n    domain=os.environ[OnyxEnv.DOMAIN],\n    token=os.environ[OnyxEnv.TOKEN],\n)\n\nwith OnyxClient(config) as client:\n    approval = client.approve(\"waiting_user\")\n</code></pre> <pre><code>&gt;&gt;&gt; approval\n{\n    \"username\": \"waiting_user\",\n    \"is_approved\": True,\n}\n</code></pre></p>"},{"location":"api/documentation/client/#onyx.OnyxClient.waiting","title":"<code>waiting()</code>","text":"<p>Get users waiting for approval.</p> RETURNS DESCRIPTION <code>List[Dict[str, Any]]</code> <p>List of users waiting for approval.</p> <p>Examples:</p> <p><pre><code>import os\nfrom onyx import OnyxConfig, OnyxEnv, OnyxClient\n\nconfig = OnyxConfig(\n    domain=os.environ[OnyxEnv.DOMAIN],\n    token=os.environ[OnyxEnv.TOKEN],\n)\n\nwith OnyxClient(config) as client:\n    users = client.waiting()\n</code></pre> <pre><code>&gt;&gt;&gt; users\n[\n    {\n        \"username\": \"waiting_user\",\n        \"site\": \"site\",\n        \"email\": \"waiting_user@email.com\",\n        \"date_joined\": \"2023-01-01T00:00:00.000000Z\",\n    }\n]\n</code></pre></p>"},{"location":"api/documentation/client/#onyx.OnyxClient.site_users","title":"<code>site_users()</code>","text":"<p>Get users within the site of the requesting user.</p> RETURNS DESCRIPTION <code>List[Dict[str, Any]]</code> <p>List of users within the site of the requesting user.</p> <p>Examples:</p> <p><pre><code>import os\nfrom onyx import OnyxConfig, OnyxEnv, OnyxClient\n\nconfig = OnyxConfig(\n    domain=os.environ[OnyxEnv.DOMAIN],\n    token=os.environ[OnyxEnv.TOKEN],\n)\n\nwith OnyxClient(config):\n    users = client.site_users()\n</code></pre> <pre><code>&gt;&gt;&gt; users\n[\n    {\n        \"username\": \"user\",\n        \"site\": \"site\",\n        \"email\": \"user@email.com\",\n    }\n]\n</code></pre></p>"},{"location":"api/documentation/client/#onyx.OnyxClient.all_users","title":"<code>all_users()</code>","text":"<p>Get all users.</p> RETURNS DESCRIPTION <code>List[Dict[str, Any]]</code> <p>List of all users.</p> <p>Examples:</p> <p><pre><code>import os\nfrom onyx import OnyxConfig, OnyxEnv, OnyxClient\n\nconfig = OnyxConfig(\n    domain=os.environ[OnyxEnv.DOMAIN],\n    token=os.environ[OnyxEnv.TOKEN],\n)\n\nwith OnyxClient(config) as client:\n    users = client.all_users()\n</code></pre> <pre><code>&gt;&gt;&gt; users\n[\n    {\n        \"username\": \"user\",\n        \"site\": \"site\",\n        \"email\": \"user@email.com\",\n    },\n    {\n        \"username\": \"another_user\",\n        \"site\": \"another_site\",\n        \"email\": \"another_user@email.com\",\n    },\n]\n</code></pre></p>"},{"location":"api/documentation/config/","title":"OnyxConfig","text":"<p>Class for storing information required to connect/authenticate with Onyx.</p>"},{"location":"api/documentation/config/#onyx.OnyxConfig.__init__","title":"<code>__init__(domain, token=None, username=None, password=None)</code>","text":"<p>Initialise a config.</p> <p>This object stores information required to connect and authenticate with Onyx.</p> <p>A domain must be provided, alongside an API token and/or the username + password.</p> PARAMETER DESCRIPTION <code>domain</code> <p>Domain for connecting to Onyx.</p> <p> TYPE: <code>str</code> </p> <code>token</code> <p>Token for authenticating with Onyx.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>username</code> <p>Username for authenticating with Onyx.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>password</code> <p>Password for authenticating with Onyx.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <p>Examples:</p> <p>Create a config using environment variables for the domain and an API token: <pre><code>import os\nfrom onyx import OnyxConfig, OnyxEnv\n\nconfig = OnyxConfig(\n    domain=os.environ[OnyxEnv.DOMAIN],\n    token=os.environ[OnyxEnv.TOKEN],\n)\n</code></pre></p> <p>Or using environment variables for the domain and login credentials: <pre><code>import os\nfrom onyx import OnyxConfig, OnyxEnv\n\nconfig = OnyxConfig(\n    domain=os.environ[OnyxEnv.DOMAIN],\n    username=os.environ[OnyxEnv.USERNAME],\n    password=os.environ[OnyxEnv.PASSWORD],\n)\n</code></pre></p>"},{"location":"api/documentation/env/","title":"OnyxEnv","text":"<p>Class containing recommended environment variable names for Onyx.</p> <p>If environment variables are created with these recommended names, then the attributes of this class can be used to access them.</p> <p>These attributes and the recommended environment variable names are: <pre><code>OnyxEnv.DOMAIN = \"ONYX_DOMAIN\"\nOnyxEnv.TOKEN = \"ONYX_TOKEN\"\nOnyxEnv.USERNAME = \"ONYX_USERNAME\"\nOnyxEnv.PASSWORD = \"ONYX_PASSWORD\"\n</code></pre></p> <p>Examples:</p> <p>In the shell, create the following environment variables with your credentials: <pre><code>$ export ONYX_DOMAIN=\"https://onyx.example.domain\"\n$ export ONYX_TOKEN=\"example-onyx-token\"\n$ export ONYX_USERNAME=\"example-onyx-username\"\n$ export ONYX_PASSWORD=\"example-onyx-password\"\n</code></pre></p> <p>Then access them in Python to create an OnyxConfig object: <pre><code>import os\nfrom onyx import OnyxEnv, OnyxConfig\n\nconfig = OnyxConfig(\n    domain=os.environ[OnyxEnv.DOMAIN],\n    token=os.environ[OnyxEnv.TOKEN],\n    username=os.environ[OnyxEnv.USERNAME],\n    password=os.environ[OnyxEnv.PASSWORD],\n)\n</code></pre></p>"},{"location":"api/documentation/exceptions/","title":"Exceptions","text":""},{"location":"api/documentation/exceptions/#onyx.exceptions.OnyxError","title":"<code>OnyxError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Generic class for all Onyx exceptions.</p>"},{"location":"api/documentation/exceptions/#onyx.exceptions.OnyxConfigError","title":"<code>OnyxConfigError</code>","text":"<p>               Bases: <code>OnyxError</code></p> <p>Config validation error.</p> <p>This error occurs due to validation failures when initialising an <code>OnyxConfig</code> object.</p> <p>Examples:</p> <ul> <li>A <code>domain</code> was not provided.</li> <li>Neither a <code>token</code> or valid login credentials (<code>username</code> and <code>password</code>) were provided.</li> </ul>"},{"location":"api/documentation/exceptions/#onyx.exceptions.OnyxClientError","title":"<code>OnyxClientError</code>","text":"<p>               Bases: <code>OnyxError</code></p> <p>Client validation error.</p> <p>This error occurs due to validation failures within an <code>OnyxClient</code> object, and not due to error codes returned by the Onyx API.</p> <p>Examples:</p> <ul> <li>Incorrect types were provided to <code>OnyxClient</code> methods.</li> <li>Empty strings were provided for required arguments such as the <code>climb_id</code>, creating an invalid URL.</li> <li>Empty CSV/TSV files are provided on <code>OnyxClient.csv_create</code>, <code>OnyxClient.csv_update</code>, or <code>OnyxClient.csv_delete</code>.</li> <li>CSV/TSV files with more than one record are provided to <code>OnyxClient.csv_create</code>, <code>OnyxClient.csv_update</code>, or <code>OnyxClient.csv_delete</code> when <code>multiline = False</code>.</li> </ul> Notes <ul> <li>One counter-intuitive cause of this error is when an <code>OnyxClient.get</code> request using <code>fields</code> returns more than one result.</li> <li>This is not an <code>OnyxRequestError</code> because for this particular combination of parameters, an underlying call to the <code>OnyxClient.filter</code> method is made.</li> <li>The request to the Onyx API may be successful, but return more than one record. However, the <code>OnyxClient.get</code> method expects a single record, resulting in the error being raised.</li> <li>This behaviour may change in the future.</li> </ul>"},{"location":"api/documentation/exceptions/#onyx.exceptions.OnyxFieldError","title":"<code>OnyxFieldError</code>","text":"<p>               Bases: <code>OnyxError</code></p> <p>Field validation error.</p> <p>This error occurs due to validation failures within the <code>OnyxField</code> class.</p> <p>Examples:</p> <ul> <li>The user did not provide exactly one key-value pair on initialisation.</li> <li>An attempt was made to combine an <code>OnyxField</code> instance with a different type.</li> <li>The structure of the underlying <code>OnyxField.query</code> is somehow incorrect.</li> </ul>"},{"location":"api/documentation/exceptions/#onyx.exceptions.OnyxConnectionError","title":"<code>OnyxConnectionError</code>","text":"<p>               Bases: <code>OnyxError</code></p> <p>Onyx connection error.</p> <p>This error occurs due to a failure to connect to the Onyx API.</p> Notes <ul> <li>This error occurs due to any subclass of <code>requests.RequestException</code> (excluding <code>requests.HTTPError</code>) being raised.</li> <li>For more information, see: https://requests.readthedocs.io/en/latest/api/#requests.RequestException</li> </ul>"},{"location":"api/documentation/exceptions/#onyx.exceptions.OnyxHTTPError","title":"<code>OnyxHTTPError</code>","text":"<p>               Bases: <code>OnyxError</code></p> <p>Onyx HTTP error.</p> <p>This error occurs due to a request to the Onyx API either failing (code <code>4xx</code>) or causing a server error (code <code>5xx</code>).</p> Notes <ul> <li>This error occurs due to a <code>requests.HTTPError</code> being raised.</li> <li>Like the <code>requests.HTTPError</code> class, instances of this class have a <code>response</code> object containing details of the error.</li> <li>For more information on the <code>response</code> object, see: https://requests.readthedocs.io/en/latest/api/#requests.Response</li> </ul> <p>Examples:</p> <pre><code>import os\nfrom onyx import OnyxConfig, OnyxEnv, OnyxClient, OnyxField\nfrom onyx.exceptions import OnyxHTTPError\n\nconfig = OnyxConfig(\n    domain=os.environ[OnyxEnv.DOMAIN],\n    token=os.environ[OnyxEnv.TOKEN],\n)\n\nwith OnyxClient(config) as client:\n    try:\n        records = list(\n            client.query(\n                project=\"project\",\n                query=(\n                    OnyxField(field1=\"abcd\")\n                    &amp; OnyxField(published_date__range=[\"2023-01-01\", \"2023-01-02\"])\n                ),\n            )\n        )\n    except OnyxHTTPError as e:\n        print(e.response.json())\n</code></pre>"},{"location":"api/documentation/exceptions/#onyx.exceptions.OnyxRequestError","title":"<code>OnyxRequestError</code>","text":"<p>               Bases: <code>OnyxHTTPError</code></p> <p>Onyx request error.</p> <p>This error occurs due to a failed request to the Onyx API (code <code>4xx</code>).</p> <p>Examples:</p> <ul> <li>Invalid field names or field values (<code>400 Bad Request</code>).</li> <li>Invalid authentication credentials (<code>401 Unauthorized</code>).</li> <li>A request was made for something which the user has insufficient permissions for (<code>403 Forbidden</code>).</li> <li>An invalid project / CLIMB ID / anonymised value was provided (<code>404 Not Found</code>).</li> <li>An invalid HTTP method was used (<code>405 Method Not Allowed</code>).</li> </ul>"},{"location":"api/documentation/exceptions/#onyx.exceptions.OnyxServerError","title":"<code>OnyxServerError</code>","text":"<p>               Bases: <code>OnyxHTTPError</code></p> <p>Onyx server error.</p> <p>This error occurs due to a request to the Onyx API causing a server error (code <code>5xx</code>).</p> Warning <p>Server errors are unintended and should be reported to an admin if encountered.</p>"},{"location":"api/documentation/field/","title":"OnyxField","text":"<p>Class that represents a single field-value pair for use in Onyx queries.</p>"},{"location":"api/documentation/field/#onyx.OnyxField.__init__","title":"<code>__init__(**kwargs)</code>","text":"<p>Initialise a field.</p> PARAMETER DESCRIPTION <code>**kwargs</code> <p>Keyword arguments containing a single key-value pair.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>{}</code> </p> Notes <ul> <li>Takes a single key-value argument as input.</li> <li>The key corresponds to a field (and optional lookup) to use for filtering.</li> <li>The value corresponds to the field value(s) that are being matched against.</li> <li><code>OnyxField</code> instances can be combined into complex expressions using Python's bitwise operators: <code>&amp;</code> (AND), <code>|</code> (OR), <code>^</code> (XOR), and <code>~</code> (NOT).</li> <li>Multi-value lookups (e.g. <code>in</code>, <code>range</code>) support passing a Python list as the value. These are coerced into comma-separated strings internally.</li> </ul> <p>Examples:</p> <p>Create <code>OnyxField</code> objects and combine them using Python bitwise operators: <pre><code>from onyx import OnyxField\n\nfield1 = OnyxField(field1=\"value1\")\nfield2 = OnyxField(field2__contains=\"value2\")\n\nexpression = (field1 | field2) &amp; OnyxField(\n    published_date__range=[\"2023-01-01\", \"2023-01-02\"]\n)\n</code></pre> <pre><code>&gt;&gt;&gt; field1\n&lt;onyx.field.OnyxField object at 0x1028eb850&gt;\n&gt;&gt;&gt; field2\n&lt;onyx.field.OnyxField object at 0x1028eb850&gt;\n&gt;&gt;&gt; expression\n&lt;onyx.field.OnyxField object at 0x103b6fc40&gt;\n&gt;&gt;&gt; field1.query\n{\"field1\": \"value1\"}\n&gt;&gt;&gt; field2.query\n{\"field2__contains\": \"value2\"}\n&gt;&gt;&gt; expression.query\n{\n    \"&amp;\": [\n        {\"|\": [{\"field1\": \"value1\"}, {\"field2__contains\": \"value2\"}]},\n        {\"published_date__range\": \"2023-01-01,2023-01-02\"},\n    ]\n}\n</code></pre></p>"},{"location":"cli/documentation/","title":"<code>onyx</code>","text":"<p>API for pathogen metadata.</p> <p>Usage:</p> <pre><code>$ onyx [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>-d, --domain TEXT</code>: Domain name for connecting to Onyx.  [env var: ONYX_DOMAIN]</li> <li><code>-t, --token TEXT</code>: Token for authenticating with Onyx.  [env var: ONYX_TOKEN]</li> <li><code>-u, --username TEXT</code>: Username for authenticating with Onyx.  [env var: ONYX_USERNAME]</li> <li><code>-p, --password TEXT</code>: Password for authenticating with Onyx.  [env var: ONYX_PASSWORD]</li> <li><code>-v, --version</code>: Show the client version number and exit.</li> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>projects</code>: View available projects.</li> <li><code>types</code>: View available field types.</li> <li><code>lookups</code>: View available lookups.</li> <li><code>fields</code>: View the field specification for a project.</li> <li><code>choices</code>: View options for a choice field in a project.</li> <li><code>get</code>: Get a record from a project.</li> <li><code>filter</code>: Filter multiple records from a project.</li> <li><code>history</code>: View the history of a record in a project.</li> <li><code>identify</code>: Get the anonymised identifier for a value...</li> <li><code>create</code>: Create a record in a project.</li> <li><code>update</code>: Update a record in a project.</li> <li><code>delete</code>: Delete a record in a project.</li> <li><code>profile</code>: View profile information.</li> <li><code>activity</code>: View latest profile activity.</li> <li><code>siteusers</code>: View users from the same site.</li> <li><code>auth</code>: Authentication commands.</li> <li><code>admin</code>: Admin commands.</li> </ul>"},{"location":"cli/documentation/#onyx-projects","title":"<code>onyx projects</code>","text":"<p>View available projects.</p> <p>Usage:</p> <pre><code>$ onyx projects [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-F, --format [table|json]</code>: Set the file format of the returned data.  [default: table]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/documentation/#onyx-types","title":"<code>onyx types</code>","text":"<p>View available field types.</p> <p>Usage:</p> <pre><code>$ onyx types [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-F, --format [table|json]</code>: Set the file format of the returned data.  [default: table]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/documentation/#onyx-lookups","title":"<code>onyx lookups</code>","text":"<p>View available lookups.</p> <p>Usage:</p> <pre><code>$ onyx lookups [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-F, --format [table|json]</code>: Set the file format of the returned data.  [default: table]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/documentation/#onyx-fields","title":"<code>onyx fields</code>","text":"<p>View the field specification for a project.</p> <p>Usage:</p> <pre><code>$ onyx fields [OPTIONS] PROJECT\n</code></pre> <p>Arguments:</p> <ul> <li><code>PROJECT</code>: [required]</li> </ul> <p>Options:</p> <ul> <li><code>-F, --format [table|json|csv|tsv]</code>: Set the file format of the returned data.  [default: table]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/documentation/#onyx-choices","title":"<code>onyx choices</code>","text":"<p>View options for a choice field in a project.</p> <p>Usage:</p> <pre><code>$ onyx choices [OPTIONS] PROJECT FIELD\n</code></pre> <p>Arguments:</p> <ul> <li><code>PROJECT</code>: [required]</li> <li><code>FIELD</code>: [required]</li> </ul> <p>Options:</p> <ul> <li><code>-F, --format [table|json]</code>: Set the file format of the returned data.  [default: table]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/documentation/#onyx-get","title":"<code>onyx get</code>","text":"<p>Get a record from a project.</p> <p>Usage:</p> <pre><code>$ onyx get [OPTIONS] PROJECT [CLIMB_ID]\n</code></pre> <p>Arguments:</p> <ul> <li><code>PROJECT</code>: [required]</li> <li><code>[CLIMB_ID]</code></li> </ul> <p>Options:</p> <ul> <li><code>-f, --field TEXT</code>: Filter the data by providing conditions that the fields must match. Uses a <code>name=value</code> syntax.</li> <li><code>-i, --include TEXT</code>: Specify which fields to include in the output.</li> <li><code>-e, --exclude TEXT</code>: Specify which fields to exclude from the output.</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/documentation/#onyx-filter","title":"<code>onyx filter</code>","text":"<p>Filter multiple records from a project.</p> <p>Usage:</p> <pre><code>$ onyx filter [OPTIONS] PROJECT\n</code></pre> <p>Arguments:</p> <ul> <li><code>PROJECT</code>: [required]</li> </ul> <p>Options:</p> <ul> <li><code>-f, --field TEXT</code>: Filter the data by providing conditions that the fields must match. Uses a <code>name=value</code> syntax.</li> <li><code>-i, --include TEXT</code>: Specify which fields to include in the output.</li> <li><code>-e, --exclude TEXT</code>: Specify which fields to exclude from the output.</li> <li><code>-s, --summarise TEXT</code>: For a given field (or group of fields), return the frequency of each unique value (or unique group of values).</li> <li><code>-F, --format [json|csv|tsv]</code>: Set the file format of the returned data.  [default: json]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/documentation/#onyx-history","title":"<code>onyx history</code>","text":"<p>View the history of a record in a project.</p> <p>Usage:</p> <pre><code>$ onyx history [OPTIONS] PROJECT CLIMB_ID\n</code></pre> <p>Arguments:</p> <ul> <li><code>PROJECT</code>: [required]</li> <li><code>CLIMB_ID</code>: [required]</li> </ul> <p>Options:</p> <ul> <li><code>-F, --format [table|json]</code>: Set the file format of the returned data.  [default: table]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/documentation/#onyx-identify","title":"<code>onyx identify</code>","text":"<p>Get the anonymised identifier for a value on a field.</p> <p>Usage:</p> <pre><code>$ onyx identify [OPTIONS] PROJECT FIELD VALUE\n</code></pre> <p>Arguments:</p> <ul> <li><code>PROJECT</code>: [required]</li> <li><code>FIELD</code>: [required]</li> <li><code>VALUE</code>: [required]</li> </ul> <p>Options:</p> <ul> <li><code>-s, --site TEXT</code>: Site code for the value. If not provided, defaults to the user's site.</li> <li><code>-F, --format [table|json]</code>: Set the file format of the returned data.  [default: table]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/documentation/#onyx-create","title":"<code>onyx create</code>","text":"<p>Create a record in a project.</p> <p>Usage:</p> <pre><code>$ onyx create [OPTIONS] PROJECT\n</code></pre> <p>Arguments:</p> <ul> <li><code>PROJECT</code>: [required]</li> </ul> <p>Options:</p> <ul> <li><code>-f, --field TEXT</code>: Field and value to be created. Uses a <code>name=value</code> syntax.</li> <li><code>-t, --test</code>: Run the command as a test.  [default: (False)]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/documentation/#onyx-update","title":"<code>onyx update</code>","text":"<p>Update a record in a project.</p> <p>Usage:</p> <pre><code>$ onyx update [OPTIONS] PROJECT CLIMB_ID\n</code></pre> <p>Arguments:</p> <ul> <li><code>PROJECT</code>: [required]</li> <li><code>CLIMB_ID</code>: [required]</li> </ul> <p>Options:</p> <ul> <li><code>-f, --field TEXT</code>: Field and value to be updated. Uses a <code>name=value</code> syntax.</li> <li><code>-t, --test</code>: Run the command as a test.  [default: (False)]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/documentation/#onyx-delete","title":"<code>onyx delete</code>","text":"<p>Delete a record in a project.</p> <p>Usage:</p> <pre><code>$ onyx delete [OPTIONS] PROJECT CLIMB_ID\n</code></pre> <p>Arguments:</p> <ul> <li><code>PROJECT</code>: [required]</li> <li><code>CLIMB_ID</code>: [required]</li> </ul> <p>Options:</p> <ul> <li><code>--force</code>: Run the command without confirmation.  [default: (False)]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/documentation/#onyx-profile","title":"<code>onyx profile</code>","text":"<p>View profile information.</p> <p>Usage:</p> <pre><code>$ onyx profile [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-F, --format [table|json]</code>: Set the file format of the returned data.  [default: table]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/documentation/#onyx-activity","title":"<code>onyx activity</code>","text":"<p>View latest profile activity.</p> <p>Usage:</p> <pre><code>$ onyx activity [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-F, --format [table|json]</code>: Set the file format of the returned data.  [default: table]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/documentation/#onyx-siteusers","title":"<code>onyx siteusers</code>","text":"<p>View users from the same site.</p> <p>Usage:</p> <pre><code>$ onyx siteusers [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-F, --format [table|json]</code>: Set the file format of the returned data.  [default: table]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/documentation/#onyx-auth","title":"<code>onyx auth</code>","text":"<p>Authentication commands.</p> <p>Usage:</p> <pre><code>$ onyx auth [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>register</code>: Create a new user.</li> <li><code>login</code>: Log in.</li> <li><code>logout</code>: Log out.</li> <li><code>logoutall</code>: Log out across all clients.</li> </ul>"},{"location":"cli/documentation/#onyx-auth-register","title":"<code>onyx auth register</code>","text":"<p>Create a new user.</p> <p>Usage:</p> <pre><code>$ onyx auth register [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/documentation/#onyx-auth-login","title":"<code>onyx auth login</code>","text":"<p>Log in.</p> <p>Usage:</p> <pre><code>$ onyx auth login [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/documentation/#onyx-auth-logout","title":"<code>onyx auth logout</code>","text":"<p>Log out.</p> <p>Usage:</p> <pre><code>$ onyx auth logout [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/documentation/#onyx-auth-logoutall","title":"<code>onyx auth logoutall</code>","text":"<p>Log out across all clients.</p> <p>Usage:</p> <pre><code>$ onyx auth logoutall [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/documentation/#onyx-admin","title":"<code>onyx admin</code>","text":"<p>Admin commands.</p> <p>Usage:</p> <pre><code>$ onyx admin [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>waiting</code>: View users waiting for approval.</li> <li><code>approve</code>: Approve a user.</li> <li><code>allusers</code>: View users across all sites.</li> </ul>"},{"location":"cli/documentation/#onyx-admin-waiting","title":"<code>onyx admin waiting</code>","text":"<p>View users waiting for approval.</p> <p>Usage:</p> <pre><code>$ onyx admin waiting [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-F, --format [table|json]</code>: Set the file format of the returned data.  [default: table]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/documentation/#onyx-admin-approve","title":"<code>onyx admin approve</code>","text":"<p>Approve a user.</p> <p>Usage:</p> <pre><code>$ onyx admin approve [OPTIONS] USERNAME\n</code></pre> <p>Arguments:</p> <ul> <li><code>USERNAME</code>: Name of the user being approved.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/documentation/#onyx-admin-allusers","title":"<code>onyx admin allusers</code>","text":"<p>View users across all sites.</p> <p>Usage:</p> <pre><code>$ onyx admin allusers [OPTIONS]\n</code></pre> <p>Options:</p> <ul> <li><code>-F, --format [table|json]</code>: Set the file format of the returned data.  [default: table]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"},{"location":"cli/getting-started/","title":"Getting started","text":""},{"location":"cli/getting-started/#getting-started","title":"Getting started","text":"<p>This guide walks through getting started with the Onyx-client command-line interface.</p> <p>The guide assumes an environment where authentication credentials are pre-configured.</p>"},{"location":"cli/getting-started/#profile-information","title":"Profile information","text":"<pre><code>$ onyx profile\n</code></pre>"},{"location":"cli/getting-started/#available-projects","title":"Available projects","text":"<pre><code>$ onyx projects\n</code></pre> <p>If you cannot see the project(s) that you require access to, contact an admin.</p>"},{"location":"cli/getting-started/#project-fields","title":"Project fields","text":"<pre><code>$ onyx fields PROJECT\n</code></pre> <p>This returns the fields specification for the given <code>PROJECT</code>.</p>"},{"location":"cli/getting-started/#project-data","title":"Project data","text":"<pre><code>$ onyx filter PROJECT\n</code></pre> <p>This returns all records from the given <code>PROJECT</code>.</p> <p>The data can be exported to various file formats:</p> <pre><code>$ onyx filter PROJECT --format json &gt; data.json\n$ onyx filter PROJECT --format csv &gt; data.csv\n$ onyx filter PROJECT --format tsv &gt; data.tsv\n</code></pre>"},{"location":"cli/getting-started/#filtering","title":"Filtering","text":"<p>A project's data can be filtered to return records that match certain conditions.</p> <p>Filtering on the CLI uses a <code>field=value</code> syntax, where <code>field</code> is the name of a field in the project, and <code>value</code> is the value you want to match.</p> <p>Multiple filters can be provided, and only the records that satisfy all these filters will be returned.</p>"},{"location":"cli/getting-started/#advanced-filtering-using-lookups","title":"Advanced filtering using lookups","text":"<p>The data can be filtered in more complex ways using lookups. These use a <code>field.lookup=value</code> syntax (or alternatively, <code>field__lookup=value</code>), and different ones are available depending on a field's data type (e.g. <code>text</code>, <code>integer</code>). There are lookups for searching between a range of values on a field (<code>range</code>), whether a field's value is empty (<code>isnull</code>), whether a field case-insensitively contains some text (<code>icontains</code>), and more. </p>"},{"location":"cli/getting-started/#examples","title":"Examples","text":"<p>To filter for all records in a <code>PROJECT</code> published on a specific date (e.g. <code>2023-09-18</code>):</p> <pre><code>$ onyx filter PROJECT --field published_date=2023-09-18\n</code></pre> <p>To filter for all records in a <code>PROJECT</code> published on the current date, a special <code>today</code> keyword can be used:</p> <pre><code>$ onyx filter PROJECT --field published_date=today\n</code></pre> <p>To filter for all records in a <code>PROJECT</code> with a <code>published_date</code> from <code>2023-09-01</code> to <code>2023-09-18</code>, the <code>range</code> lookup can be used: </p> <pre><code>$ onyx filter PROJECT --field published_date.range=2023-09-01,2023-09-18\n</code></pre> <p>Assuming that <code>PROJECT</code> has a <code>sample_type</code> field, then all records with <code>sample_type = \"swab\"</code> that were published from <code>2023-09-01</code> to <code>2023-09-18</code> can be obtained with: </p> <pre><code>$ onyx filter PROJECT --field published_date.range=2023-09-01,2023-09-18 --field sample_type=swab\n</code></pre>"},{"location":"cli/getting-started/#further-guidance","title":"Further guidance","text":"<p>For further guidance using Onyx-client, use the <code>--help</code> option.</p> <pre><code>$ onyx --help\n$ onyx profile --help\n$ onyx projects --help\n$ onyx fields --help\n$ onyx filter --help\n</code></pre>"},{"location":"fields/lookups/","title":"Lookups","text":"<p>Lookups can be used to specify more complex conditions that fields must match when filtering.</p> <p>Different types have different lookups available to them. </p>"},{"location":"fields/lookups/#exact","title":"<code>exact</code>","text":"<p><code>[text]</code> <code>[choice]</code> <code>[integer]</code> <code>[decimal]</code> <code>[date]</code> <code>[datetime]</code> <code>[bool]</code> <code>[array]</code> <code>[structure]</code></p> <p>Return values equal to the search value.</p>"},{"location":"fields/lookups/#ne","title":"<code>ne</code>","text":"<p><code>[text]</code> <code>[choice]</code> <code>[integer]</code> <code>[decimal]</code> <code>[date]</code> <code>[datetime]</code> <code>[bool]</code></p> <p>Return values not equal to the search value.</p>"},{"location":"fields/lookups/#in","title":"<code>in</code>","text":"<p><code>[text]</code> <code>[choice]</code> <code>[integer]</code> <code>[decimal]</code> <code>[date]</code> <code>[datetime]</code> <code>[bool]</code></p> <p>Return values that are within the set of search values.</p>"},{"location":"fields/lookups/#notin","title":"<code>notin</code>","text":"<p><code>[text]</code> <code>[choice]</code> <code>[integer]</code> <code>[decimal]</code> <code>[date]</code> <code>[datetime]</code> <code>[bool]</code></p> <p>Return values that are not within the set of search values.</p>"},{"location":"fields/lookups/#contains","title":"<code>contains</code>","text":"<p><code>[text]</code> <code>[array]</code> <code>[structure]</code></p> <p>Return values that contain the search value.</p>"},{"location":"fields/lookups/#startswith","title":"<code>startswith</code>","text":"<p><code>[text]</code></p> <p>Return values that start with the search value.</p>"},{"location":"fields/lookups/#endswith","title":"<code>endswith</code>","text":"<p><code>[text]</code></p> <p>Return values that end with the search value.</p>"},{"location":"fields/lookups/#iexact","title":"<code>iexact</code>","text":"<p><code>[text]</code></p> <p>Return values case-insensitively equal to the search value.</p>"},{"location":"fields/lookups/#icontains","title":"<code>icontains</code>","text":"<p><code>[text]</code></p> <p>Return values that case-insensitively contain the search value.</p>"},{"location":"fields/lookups/#istartswith","title":"<code>istartswith</code>","text":"<p><code>[text]</code></p> <p>Return values that case-insensitively start with the search value.</p>"},{"location":"fields/lookups/#iendswith","title":"<code>iendswith</code>","text":"<p><code>[text]</code></p> <p>Return values that case-insensitively end with the search value.</p>"},{"location":"fields/lookups/#length","title":"<code>length</code>","text":"<p><code>[text]</code> <code>[array]</code></p> <p>Return values with a length equal to the search value.</p>"},{"location":"fields/lookups/#length__in","title":"<code>length__in</code>","text":"<p><code>[text]</code> <code>[array]</code></p> <p>Return values with a length that is within the set of search values.</p>"},{"location":"fields/lookups/#length__range","title":"<code>length__range</code>","text":"<p><code>[text]</code> <code>[array]</code></p> <p>Return values with a length that is within an inclusive range of search values.</p>"},{"location":"fields/lookups/#lt","title":"<code>lt</code>","text":"<p><code>[integer]</code> <code>[decimal]</code> <code>[date]</code> <code>[datetime]</code></p> <p>Return values less than the search value.</p>"},{"location":"fields/lookups/#lte","title":"<code>lte</code>","text":"<p><code>[integer]</code> <code>[decimal]</code> <code>[date]</code> <code>[datetime]</code></p> <p>Return values less than or equal to the search value.</p>"},{"location":"fields/lookups/#gt","title":"<code>gt</code>","text":"<p><code>[integer]</code> <code>[decimal]</code> <code>[date]</code> <code>[datetime]</code></p> <p>Return values greater than the search value.</p>"},{"location":"fields/lookups/#gte","title":"<code>gte</code>","text":"<p><code>[integer]</code> <code>[decimal]</code> <code>[date]</code> <code>[datetime]</code></p> <p>Return values greater than or equal to the search value.</p>"},{"location":"fields/lookups/#range","title":"<code>range</code>","text":"<p><code>[integer]</code> <code>[decimal]</code> <code>[date]</code> <code>[datetime]</code></p> <p>Return values within an inclusive range of search values.</p>"},{"location":"fields/lookups/#iso_year","title":"<code>iso_year</code>","text":"<p><code>[date]</code> <code>[datetime]</code></p> <p>Return values with an ISO 8601 week-numbering year equal to the search year.</p>"},{"location":"fields/lookups/#iso_year__in","title":"<code>iso_year__in</code>","text":"<p><code>[date]</code> <code>[datetime]</code></p> <p>Return values with an ISO 8601 week-numbering year that is within the set of search years.</p>"},{"location":"fields/lookups/#iso_year__range","title":"<code>iso_year__range</code>","text":"<p><code>[date]</code> <code>[datetime]</code></p> <p>Return values with an ISO 8601 week-numbering year that is within an inclusive range of search years.</p>"},{"location":"fields/lookups/#week","title":"<code>week</code>","text":"<p><code>[date]</code> <code>[datetime]</code></p> <p>Return values with an ISO 8601 week number equal to the search number.</p>"},{"location":"fields/lookups/#week__in","title":"<code>week__in</code>","text":"<p><code>[date]</code> <code>[datetime]</code></p> <p>Return values with an ISO 8601 week number that is within the set of search numbers.</p>"},{"location":"fields/lookups/#week__range","title":"<code>week__range</code>","text":"<p><code>[date]</code> <code>[datetime]</code></p> <p>Return values with an ISO 8601 week number that is within an inclusive range of search numbers.</p>"},{"location":"fields/lookups/#isnull","title":"<code>isnull</code>","text":"<p><code>[text]</code> <code>[choice]</code> <code>[integer]</code> <code>[decimal]</code> <code>[date]</code> <code>[datetime]</code> <code>[bool]</code> <code>[relation]</code> <code>[array]</code> <code>[structure]</code></p> <p>Return values that are empty (<code>isnull = True</code>) or non-empty (<code>isnull = False</code>). </p> <ul> <li>For <code>text</code> and <code>choice</code> types, 'empty' is defined as the empty string <code>\"\"</code>. </li> <li>For the <code>relation</code> type, 'empty' is defined as there being zero items linked to the record being evaluated.</li> <li>For the <code>array</code> type, 'empty' is defined as the empty array <code>[]</code>.</li> <li>For the <code>structure</code> type, 'empty' is defined as the empty structure <code>{}</code>.</li> <li>For all other types, 'empty' is the SQL <code>null</code> value.</li> </ul>"},{"location":"fields/lookups/#contained_by","title":"<code>contained_by</code>","text":"<p><code>[array]</code> <code>[structure]</code></p> <p>Return values that are equal to, or a subset of, the search value.</p>"},{"location":"fields/lookups/#overlap","title":"<code>overlap</code>","text":"<p><code>[array]</code></p> <p>Return values that overlap with the search value.</p>"},{"location":"fields/lookups/#has_key","title":"<code>has_key</code>","text":"<p><code>[structure]</code></p> <p>Return values that have a top-level key which contains the search value.</p>"},{"location":"fields/lookups/#has_keys","title":"<code>has_keys</code>","text":"<p><code>[structure]</code></p> <p>Return values that have top-level keys which contains all of the search values.</p>"},{"location":"fields/lookups/#has_any_keys","title":"<code>has_any_keys</code>","text":"<p><code>[structure]</code></p> <p>Return values that have top-level keys which contains any of the search values.</p>"},{"location":"fields/types/","title":"Types","text":"<p>Types in Onyx define the various categories of data which can be stored. </p> <p>Each field belongs to a certain type. This dictates what kind of data the field can store (e.g. text, numbers, dates, etc.), as well as what filter operations (i.e. lookups) can be carried out on values of the field.</p>"},{"location":"fields/types/#text","title":"<code>text</code>","text":"<p><code>[exact]</code> <code>[ne]</code> <code>[in]</code> <code>[notin]</code> <code>[contains]</code> <code>[startswith]</code> <code>[endswith]</code> <code>[iexact]</code> <code>[icontains]</code> <code>[istartswith]</code> <code>[iendswith]</code> <code>[length]</code> <code>[length__in]</code> <code>[length__range]</code> <code>[isnull]</code></p> <p>A string of characters.</p> <p>Examples: <code>\"C-1234567890\"</code>, <code>\"Details about something\"</code></p>"},{"location":"fields/types/#choice","title":"<code>choice</code>","text":"<p><code>[exact]</code> <code>[ne]</code> <code>[in]</code> <code>[notin]</code> <code>[isnull]</code></p> <p>A restricted set of options.</p> <p>Examples: <code>\"ENG\"</code>, <code>\"WALES\"</code>, <code>\"SCOT\"</code>, <code>\"NI\"</code></p>"},{"location":"fields/types/#integer","title":"<code>integer</code>","text":"<p><code>[exact]</code> <code>[ne]</code> <code>[in]</code> <code>[notin]</code> <code>[lt]</code> <code>[lte]</code> <code>[gt]</code> <code>[gte]</code> <code>[range]</code> <code>[isnull]</code></p> <p>A whole number.</p> <p>Examples: <code>1</code>, <code>-1</code>, <code>123</code></p>"},{"location":"fields/types/#decimal","title":"<code>decimal</code>","text":"<p><code>[exact]</code> <code>[ne]</code> <code>[in]</code> <code>[notin]</code> <code>[lt]</code> <code>[lte]</code> <code>[gt]</code> <code>[gte]</code> <code>[range]</code> <code>[isnull]</code></p> <p>A decimal number.</p> <p>Examples: <code>1.234</code>, <code>1.0</code>, <code>23.456</code></p>"},{"location":"fields/types/#date","title":"<code>date</code>","text":"<p><code>[exact]</code> <code>[ne]</code> <code>[in]</code> <code>[notin]</code> <code>[lt]</code> <code>[lte]</code> <code>[gt]</code> <code>[gte]</code> <code>[range]</code> <code>[iso_year]</code> <code>[iso_year__in]</code> <code>[iso_year__range]</code> <code>[week]</code> <code>[week__in]</code> <code>[week__range]</code> <code>[isnull]</code></p> <p>A date.</p> <p>Examples: <code>\"2023-03\"</code>, <code>\"2023-04-05\"</code>, <code>\"2024-01-01\"</code> </p>"},{"location":"fields/types/#datetime","title":"<code>datetime</code>","text":"<p><code>[exact]</code> <code>[ne]</code> <code>[in]</code> <code>[notin]</code> <code>[lt]</code> <code>[lte]</code> <code>[gt]</code> <code>[gte]</code> <code>[range]</code> <code>[iso_year]</code> <code>[iso_year__in]</code> <code>[iso_year__range]</code> <code>[week]</code> <code>[week__in]</code> <code>[week__range]</code> <code>[isnull]</code></p> <p>A date and time.</p> <p>Examples: <code>\"2023-01-01 15:30:03\"</code>, <code>\"2024-01-01 09:30:17\"</code></p>"},{"location":"fields/types/#bool","title":"<code>bool</code>","text":"<p><code>[exact]</code> <code>[ne]</code> <code>[in]</code> <code>[notin]</code> <code>[isnull]</code></p> <p>A true or false value.</p> <p>Examples: <code>True</code>, <code>False</code></p>"},{"location":"fields/types/#relation","title":"<code>relation</code>","text":"<p><code>[isnull]</code></p> <p>A link to a row, or multiple rows, in another table.</p>"},{"location":"fields/types/#array","title":"<code>array</code>","text":"<p><code>[exact]</code> <code>[contains]</code> <code>[contained_by]</code> <code>[overlap]</code> <code>[length]</code> <code>[length__in]</code> <code>[length__range]</code> <code>[isnull]</code></p> <p>A list of values.</p> <p>Examples: <code>[1, 2, 3]</code>, <code>[\"hello\", \"world\", \"!\"]</code></p>"},{"location":"fields/types/#structure","title":"<code>structure</code>","text":"<p><code>[exact]</code> <code>[contains]</code> <code>[contained_by]</code> <code>[has_key]</code> <code>[has_keys]</code> <code>[has_any_keys]</code> <code>[isnull]</code></p> <p>An arbitrary JSON structure.</p> <p>Examples: <code>{\"hello\" : \"world\", \"goodbye\" : \"!\"}</code>, <code>{\"numbers\" : [1, 2, {\"more_numbers\" : [3, 4, 5]}]}</code></p>"}]}